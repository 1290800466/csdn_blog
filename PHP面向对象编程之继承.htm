<!doctype html>
<html dir="ltr" lang="zh-CN">
<head>
<title>PHP面向对象编程之--继承</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<style type="text/css">
body {font:normal 12px/24px Arial, Helvetica, sans-serif; background:#D9F0DB;}
textarea,pre {font-family:Courier; font-size:12px;}
</style>
</head>
<body>
<p><a href='_index.htm'>&lt;&lt;目录</a></p><p><span style="font-size:18px"><br>
继承：所谓继承就是 一个子类 通过 extends &nbsp;父类 &nbsp;把父类的 (public / protected)属性和(public / protected)方法继承下来.<br>
父类：把各个类中共有的属性和方法抽取出来形成一个父类，然后让其他类来继承该父类。<br>
继承的基本语法是:<br>
class 类名 &nbsp;extends 父类名{<br>
&nbsp; &nbsp; &nbsp; &nbsp; //在写自己需要的属性和方法.<br>
}<br>
代码实例：</span></p>
<p><pre name="code" class="php">&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;?php
///应用场景 开发一套学生管理系统(Pupil, Graduate , ...)
        //父类
        class Stu{
                public $name;
                protected $age;
                protected $grade;
        
                public function showInfo(){
                        
                        echo $this-&gt;name;
                }


        }
        //子类
        class Pupil extends Stu{
               
                public function testing(){
                        echo &quot; 小学生考试..&quot;;
                }


        }


        class Graduate extends Stu{
               
                public function testing(){
                        echo &quot;研究生考试..&quot;;
                }
        }


        //创建学生
        $stu1=new Pupil();
        $stu1-&gt;name=&quot;小明&quot;;
        $stu1-&gt;testing();
        //继承父类Stu
        $stu1-&gt;showInfo();
        //创建一个研究生
        $stu2=new Graduate();
        $stu2-&gt;name=&quot;老明&quot;;
        $stu2-&gt;testing();
        //继承父类Stu
        $stu2-&gt;showInfo();

?&gt;&lt;/span&gt;</pre><span style="font-size:18px"><br>
讨论继承细节:&nbsp;<br>
<br>
1.父类的 public &nbsp;、protected 的属性和方法被继承. private 的属性和方法没有被继承，即私有属性和方法不能被继承.<br>
2.一个类只能继承一个父类（指直接继承）.如果你希望继承多个类的属性和方法，则使用多层继承<br>
</span></p>
<p><span style="font-size:18px">代码实例：</span></p>
<p><span style="font-size:18px"></span><pre name="code" class="php">&lt;?php

class A{
    public $n1=90;
}
class B extends A{
    public $n2=&quot;hello&quot;;
}
class C extends B{
    
}
$c=new C();
echo &quot;&lt;br/&gt;&quot;;
echo $c-&gt;n1.&quot;&lt;br/&gt;&quot;;
echo $c-&gt;n2.&quot;&lt;br/&gt;&quot;;
?&gt;
</pre></p>
<p><span style="font-size:18px"><br>
</span></p>
<span style="font-size:18px">当创建子类对象的时候，默认情况下，不会自动调用父类的构造方法.</span>
<p><pre name="code" class="php">&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;?php
class A1{
    public $n1=90;
    //构造方法
    public function __construct(){
        echo &quot;A1 __construct&quot;;
    }
}
class B1 extends A1{    
    function __construct(){
        echo &quot;B1 __construct&lt;br/&gt;&quot;;
    }
}
//创建b对象实例，只调用子类构造方法，不会调用父类构造方法
$b=new B1();
?&gt;&lt;/span&gt;</pre><span style="font-size:18px"><br>
如果我们希望去调用父类的 构造方法，或者其它的方法(public / &nbsp;protected) ,可以这样处理 (了解)<br>
&nbsp; &nbsp; &nbsp;类名::方法名() &nbsp; &nbsp; 或 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; parent::方法名()<br>
代码实例：</span><pre name="code" class="php">&lt;span style=&quot;font-size:18px;&quot;&gt;&lt;?php

class A2{
    public $n1=90;
    //构造方法
    public function __construct(){   
       echo &quot;A2 __construct&lt;br/&gt;&quot;;
    }
    public function test(){
        echo &quot;test()&quot;;
    }
}
class B2 extends A2{
    function __construct(){
        echo &quot;B2 __construct&lt;br&gt;&quot;;
        //显式的调用父类的方法一
        A2::__construct();
        //显式的调用父类的方法二
        parent::__construct();
        //此方法也可调用普通函数
        parent::test();
        
    }
}
//创建b对象实例
$b=new B2(); 
?&gt;&lt;/span&gt;</pre><span style="font-size:18px"><br>
当一个子类的方法和父类的方法完全一样(public/protected), 我们称为 方法的覆盖 (方法重写) &nbsp; &nbsp; &nbsp;</span></p>
<br>
<p><a href='_index.htm'>&lt;&lt;目录</a></p>
</body>
</html>