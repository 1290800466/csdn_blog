<!doctype html>
<html dir="ltr" lang="zh-CN">
<head>
<title>PHP 构造方法说明</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<style type="text/css">
body {font:normal 12px/24px Arial, Helvetica, sans-serif; background:#D9F0DB;}
textarea,pre {font-family:Courier; font-size:12px;}
</style>
</head>
<body>
<p><a href='_index.htm'>&lt;&lt;目录</a></p><span style="font-size:18px"><strong>1、构造方法的8点说明:</strong><br>
<span style="white-space:pre"></span>①构造方法名和类名相同(php4版),php5版的构造方法名可以和类名相同，也可以是__construct()<br>
<span style="white-space:pre"></span>②构造方法没有返回&#20540;<br>
<span style="white-space:pre"></span>③构造方法的主要作用是完成对<strong>新对象的初始化</strong>，并不是创建对象本身。<br>
<span style="white-space:pre"></span>④在创建新对象后,系统会自动的调用该类的构造方法，不需要自己写代码调用 &nbsp;&nbsp;<br>
<span style="white-space:pre"></span>⑤一个类有且只有一个构造方法,在php5后虽然__construct() &nbsp;和 类名() 可以共存，但是实际上也只能使用一个。<br>
<span style="white-space:pre"></span>⑥如果没有给类自定义构造方法，则该类使用系统默认的构造方法。 */<br>
<span style="white-space:pre"></span>⑦如果给类自定义了构造方法，则该类的默认构造方法被覆盖。<br>
</span>
<p><span style="font-size:18px"><span style="white-space:pre"></span>⑧构造方法的默认访问修饰符是public</span></p>
<p><span style="font-size:18px">2、在php 5 中一个类可以同时有 两种形式的构造方法：<br>
&nbsp; &nbsp; &nbsp; __construct() 和 类名() , 当两个同时存在的时候，优先调用__construct(), 请大家以后使用__construct()</span></p>
<p><span style="font-size:18px">&nbsp; &nbsp; &nbsp; 两种构造函数如下：</span></p>
<p><span style="font-size:18px"><span style="white-space:pre"><span style="font-size:18px; white-space:pre">public</span></span>function &nbsp;__construt()<br>
<span style="white-space:pre"></span>{<br>
<span style="white-space:pre"></span>//函数体;<br>
<span style="white-space:pre"></span>} &nbsp; &nbsp; &nbsp;<br>
</span></p>
<p><span style="font-size:18px"><span style="white-space:pre"><span style="font-size:18px; white-space:pre">public</span><span style="font-size:18px">function 类名()</span><br style="font-size:18px">
<span style="font-size:18px; white-space:pre"></span><span style="font-size:18px">{</span><br style="font-size:18px">
<span style="font-size:18px; white-space:pre"></span><span style="font-size:18px">//函数体;</span><br style="font-size:18px">
<span style="font-size:18px; white-space:pre"></span><span style="font-size:18px">}</span></span></span></p>
<p><span style="font-size:18px">&nbsp; &nbsp; &nbsp;PHP4中只能有一种形式的构造函数：</span></p>
<p><span style="font-size:18px"><span style="font-size:18px; white-space:pre"><span style="font-size:18px; white-space:pre">public</span><span style="font-size:18px">function 类名()</span><br style="font-size:18px">
<span style="font-size:18px; white-space:pre"></span><span style="font-size:18px">{</span><br style="font-size:18px">
<span style="font-size:18px; white-space:pre"></span><span style="font-size:18px">//函数体;</span><br style="font-size:18px">
<span style="font-size:18px; white-space:pre"></span><span style="font-size:18px">}</span></span><br>
</span></p>
<p><span style="font-size:18px">3、构造方法注意事项：<br>
<span style="white-space:pre"></span>(1)一旦自定义了一个构造函数，默认的构造函数就被覆盖了,这时在创建对象的时候就要使用自定义的构造函数.<br>
<span style="white-space:pre"></span>(2)一个类只能有一个构造函数.(不能重载)<br>
</span></p>
<p><span style="font-size:18px">4、构造方法代码实例：</span></p>
<p></p>
<pre name="code" class="php">&lt;?php
//屏蔽程序 notice 级错误  
error_reporting(E_ALL^E_NOTICE); 
//php面向对象编程之构造方法： 
class Person1{
       public $name;
       public $age;
}
$p1=new Person1();
//再给属性赋值
$p1-&gt;name=&quot;宋江&quot;;
$p1-&gt;age=33;
//this的理解：
class Person2
{
	public $name;
	public $age;
	//这个就是构造方法,php5独有
	public function __construct($iname,$iage)
	{
		//这里如果我们直接用$name，$age，系统认为我们是创建了两个新的变量
		//$name=$iname;
		//$age=$iage;
		//此处的$this-&gt;name、$this-&gt;age则解决了以上问题，加上$this之后该变量就是指上面创建的成员属性；
		//$this 本质可以理解就是这个对象的地址，哪个对象传递时使用到$this, 就是传递哪个对象地址；</pre><pre name="code" class="php">&lt;span style=&quot;white-space:pre&quot;&gt;		&lt;/span&gt;//this就相当于传的是地址，把上面$name的地址传过来了而不是再新建一个$name变量</pre><pre name="code" class="php">		//注意：$this只能在类中使用，不能在类外部使用.
		$this-&gt;name=$iname;
		$this-&gt;age=$iage;
		echo &quot;执行构造方法&lt;br/&gt;&quot;;
	}  
}
$p1=new Person2(&quot;张清&quot;,90);
echo &quot;我是&quot;.$p1-&gt;name.&quot;--我现在的年龄是&quot;.$p1-&gt;age.&quot;&lt;br/&gt;&quot;;
$p2=new Person2(&quot;宋江&quot;,33);
echo &quot;我是&quot;.$p2-&gt;name.&quot;--我现在的年龄是&quot;.$p2-&gt;age.&quot;&lt;br/&gt;&quot;;

class Cat
{	
	//每一个类中必须有一个构造方法，若我们不定义，系统会自动生成
	//若不定义构造方法，则该类使用系统默认的构造方法，类中默认的构造方法如下：      
	function __construt()
	{
		
	}      
}
$cat1=new Cat();
?&gt;</pre><span style="font-size:18px"><br>
</span><br>
<p></p>
<p><a href='_index.htm'>&lt;&lt;目录</a></p>
</body>
</html>